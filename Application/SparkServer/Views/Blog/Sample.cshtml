@model SparkServer.ViewModels.BlogArticleViewModel

@{
    ViewBag.Title = Model.Title;
}

<article class="blog">

    @if (!String.IsNullOrEmpty(Model.ImagePath))
    {
        <div class="blog-header" style="background-image: url('@Model.ImagePath');">
            <h1>@ViewBag.Title</h1>
        </div>
    }
    else
    {
        <div class="blog-header" style="background-image: url('/Content/Images/default_blog_bg.jpg');">
            <h1>@ViewBag.Title</h1>
        </div>
    }

    <h1 class="blog-title-only">@ViewBag.Title</h1>

    <div class="blog-about">
        <div class="label">Author</div>
        <p>@Model.AuthorFullName</p>

        <div class="label">Published</div>
        <p>@Model.PublishDate.ToShortDateString()</p>

        @if (Model.BlogTags.Count > 0)
        {
            <div class="label">Tags</div>
            <ul class="tags cf">
                @foreach (var tag in Model.BlogTags)
                {
                    <li><a href="/blog/tag/@tag.BlogTagName">@tag.BlogTagName</a></li>
                }
            </ul>
        }
    </div>

    <!-- Start Body -->

    <h2>PowerShell to the Rescue</h2>

    <p>Template inheritance is one of Sitecore's most powerful concepts. Addressing items based on their template is a great way to query for similar content.</p>

    <p>In a recent task, I had to retrieve a series of items that were based on a particular template - but it was the parent template I was looking for. My tool of choice was <a href="https://sitecorepowershell.gitbooks.io/sitecore-powershell-extensions/" target="_blank">Sitecore PowerShell Extensions (SPE)</a>.</p>

    <p>SPE has access to the full Sitecore API, so retreiving items by base template was a breeze:</p>

<pre>
    <code class="powershell">
$item = Get-Item -Path master:// -ID “{b94d8408-4833-4e4e-83da-b109f06967af}”

$baseTemplates = [Sitecore.Data.Managers.TemplateManager]::GetTemplate($item).GetBaseTemplates();

foreach ($template in $baseTemplates) {
	echo $template.Name
}
	</code>
</pre>

    <!-- End Body -->

</article>

@section PageScripts {

    <script src="~/Scripts/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

}